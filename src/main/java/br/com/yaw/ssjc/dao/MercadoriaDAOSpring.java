package br.com.yaw.ssjc.dao;

import java.util.Collections;
import java.util.List;

import javax.sql.DataSource;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import br.com.yaw.ssjc.model.Mercadoria;


/**
 * Implementa o contrato de persistência <code>MercadoriaDAO</code>, para resolver o cadastro da entidade <code>Mercadoria</code>. 
 * 
 * <p>A integração com o banco de dados e o envio dos comandos SQL ocorre através da API do <code>Spring JDBC</code>.</p>
 * 
 * <p>O <code>Spring JDBC</code> é um componente do <code>Spring Framework</code>.</p>
 * 
 * @see br.com.yaw.sjpac.dao.MercadoriaDAO
 * @see spring-config.xml
 * 
 * @author YaW Tecnologia
 */
@Component
@Scope("prototype")
public class MercadoriaDAOSpring implements MercadoriaDAO {

	//comandos SQL utilizados pelo DAO.
	private final static String CREATE_TABLE = "CREATE TABLE IF NOT EXISTS mercadoria(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,DESCRICAO VARCHAR(255),NOME VARCHAR(255),PRECO DOUBLE,QUANTIDADE INTEGER)";
	private final static String INSERT_MERCADORIA = "INSERT INTO mercadoria (nome,descricao,preco,quantidade) VALUES (?,?,?,?)";
	private final static String UPDATE_MERCADORIA = "UPDATE mercadoria SET nome = ?, descricao = ?, preco = ?, quantidade = ? WHERE id = ?";
	private final static String DELETE_MERCADORIA = "DELETE FROM mercadoria WHERE id = ?";
	private final static String GET_ALL_MERCADORIAS = "SELECT * FROM mercadoria";
	private final static String GET_MERCADORIAS_BY_NOME = "SELECT * FROM mercadoria WHERE nome like ?";
	private final static String GET_MERCADORIA_BY_ID = "SELECT * FROM mercadoria WHERE id = ?";
	
	private static Logger log = Logger.getLogger(MercadoriaDAOSpring.class);

	/**
	 * Componente <code>Spring</code> que encapsula as operações JDBC.
	 */
	private JdbcTemplate jdbcTemplate;

	@Autowired
    public void setDataSource(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }
	
	public void init() {
		jdbcTemplate.execute(CREATE_TABLE);
	}
	
	@Transactional
    public void save(Mercadoria m) {
    	if (m == null) {
			throw new RuntimeException("Informe a mercadoria para salvar!");
		}
    	if (m.getId() == null) {
    		jdbcTemplate.update(INSERT_MERCADORIA, 
    				new Object[]{ m.getNome(), m.getDescricao(), m.getPreco(), m.getQuantidade() });
    	} else {
    		jdbcTemplate.update(UPDATE_MERCADORIA,
    				new Object[]{ m.getNome(), m.getDescricao(), m.getPreco(), m.getQuantidade(), m.getId() });
    	}
    	log.debug("Mercadoria foi salva");
    }
	
	@Transactional
    public void remove(Mercadoria m) {
    	if (m == null || m.getId() == null) {
			throw new RuntimeException("Informe a mercadoria para exclusão!");
		}
    	
    	jdbcTemplate.update(DELETE_MERCADORIA, new Object[]{ m.getId() });
    	log.debug("Mercadoria foi excluida");
    }
	
	public Mercadoria findById(Integer id) {
		if (id == null || id.intValue() <= 0) {
			throw new RuntimeException("Informe o id valido para fazer a busca!");
		}
		
		return jdbcTemplate.queryForObject(GET_MERCADORIA_BY_ID, 
				new Object[] { id }, new MercadoriaRowMapper());
	}
	
	public List<Mercadoria> getAll() {
		return jdbcTemplate.query(GET_ALL_MERCADORIAS, new MercadoriaRowMapper());
	}
	
	public List<Mercadoria> getMercadoriasByNome(String nome) {
		if (nome == null || nome.isEmpty()) {
			return Collections.EMPTY_LIST;
		}
		
		return jdbcTemplate.query(GET_MERCADORIAS_BY_NOME, 
				new Object[] { nome + "%" }, new MercadoriaRowMapper());
	}
	
}
